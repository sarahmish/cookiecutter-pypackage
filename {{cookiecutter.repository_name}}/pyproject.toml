[build-system]
requires = ['setuptools', 'wheel']
build-backend = 'setuptools.build_meta'

[project]
name = '{{ cookiecutter.project_slug }}'
version = '{{ cookiecutter.version }}'
description = '{{ cookiecutter.project_short_description.replace("\'", "\\\'") }}'
readme = 'README.md'
authors = [
  {name = '{{ cookiecutter.license_owner }}', email = '{{ cookiecutter.license_owner_email }}'}
]
{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
license = {text = '{{ cookiecutter.open_source_license }}'}
dependencies = [
    {%- if cookiecutter.command_line_interface|lower == 'click' %}'Click>=6.0',{%- endif %}
]

[project.optional-dependencies]
tests = [
    'pytest>=3.4.2',
    'pytest-cov>=2.6.0',
    'pytest-runner>=2.11.1',
]

dev = [
    '{{ cookiecutter.project_slug }}[test]',

    # general
    'bumpversion>=0.5.3',
    'pip>=9.0.1',
    'watchdog>=0.8.3',

    # docs
    'm2r>=0.2.0,<0.3',
    'Sphinx>=1.7.1,<3',
    'sphinx_rtd_theme>=0.2.4,<0.5',
    'autodocsumm>=0.1.10',

    # style check
    'ruff>=0.4.5',

    # distribute on PyPI
    'twine>=1.10.0',
    'wheel>=0.30.0',

    # Advanced testing
    'coverage>=4.5.1',
    'tox>=2.9.1',
]

[project.urls]
homepage = 'https://github.com/{{ cookiecutter.github_owner }}/{{ cookiecutter.repository_name }}'

[project.entry-points]
{{ cookiecutter.project_slug }} = { main = '{{ cookiecutter.project_slug }}.cli.__main__:main' }

{% if cookiecutter.command_line_interface == 'Yes' %}
[project.scripts]
{{ cookiecutter.project_slug }} = '{{ cookiecutter.project_slug }}.cli:app'
{% endif %}

[tool.setuptools]
include-package-data = true
license-files = ['LICENSE']

[tool.setuptools.packages.find]
include = ['{{ cookiecutter.project_slug }}', '{{ cookiecutter.project_slug }}.*']
namespaces = false

[tool.setuptools.package-data]
"*" = ["*.*"]

[tool.setuptools.exclude-package-data]
'*' = [
    '* __pycache__',
]

[tool.setuptools.dynamic]
version = {attr = '{{ cookiecutter.project_slug }}.__version__'}

[tool.bumpversion]
current_version = '{{ cookiecutter.version }}'
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\.(?P<release>[a-z]+)(?P<candidate>\d+))?'
serialize = [
    '{major}.{minor}.{patch}.{release}{candidate}',
	'{major}.{minor}.{patch}'
]
search = '{current_version}'
replace = '{new_version}'
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = 'v{new_version}'
tag_message = 'Bump version: {current_version} → {new_version}'
allow_dirty = false
commit = true
message = 'Bump version: {current_version} → {new_version}'
commit_args = ''

[tool.bumpversion.parts.release]
first_value = 'dev'
optional_value = 'release'
values = [
    'dev',
    'release'
]

[[tool.bumpversion.files]]
filename = "{{ cookiecutter.project_slug }}/__init__.py"
search = "__version__ = '{current_version}'"
replace = "__version__ = '{new_version}'"

[tool.pytest.ini_options]
addopts = "--ignore=pyproject.toml"

# linting
[tool.ruff]
preview = true
line-length = 99
indent-width = 4
src = ['{{ cookiecutter.project_slug }}']
exclude = [
    "docs",
    ".tox",
    ".git",
    "__pycache__",
    "*.ipynb",
    ".ipynb_checkpoints",
]

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # pycodestyle
    "W", # pycodestyle
    "D", # pydocstyle
    "I001", # isort
    "T201", # print statements
]
ignore = [
    # pydocstyle
    "D107",  # Missing docstring in __init__
    "D417",   # Missing argument descriptions in the docstring
    "PD901",
    "PD101",
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
preview = true
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ['{{ cookiecutter.project_slug }}']
lines-between-types = 0

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402", "F403", "F405", "E501", "I001"]
"tests/**.py" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 99
max-line-length = 99